#!/bin/bash
# ==============================================================================
#
#     File: sqlclioracle (AKA sqlsh)
#     Date: Thu Nov  3 08:10:07 CET 2016
#     What: SQL shell to use with Oracle, PostgreSQL and later MySQL
#           It makes extensive use of predefines Sequel scripts which are based 
#           in the folder structure of sqlsh.
#
#      Who: Gert J. Willems ITASSIST
#
# Dependencies:
#    sqlsh is entirely written in bash, see code for details
#    i.i.g. zijn de volgende scripts noodzakelijk:
#    - rlwrap
#    - libbash.sh->generic bash function library
#    - sqlsho.conf->folder structure, Constants etc.
#    - sqlsho.cl->rlwrap command completion list
#  
# The sqlcli script is wrapped in function sqlsh for prepending the script
# with the commandline pre-processor 'rlwrap'
#
# Synopsis:
#    Comming soon!
#
# Remark for revision 0.1:
#    Debugging messages are implemented and can be seen when variable 
#    SCRIPT_DEBUG=1 is set (default = 0) Messages are written to STDERR 
#    construct:
#    (
#       catch_if_debug "<message>"
#    )
#    is mainly cosmetic but it isolates the call, take notice that
#    everything is local between (  ) 
#
# ==============================================================================
# History:
# Date       Rev    Author        What
# ---------- -----  ------------- -----------------------------------------------
# 03-11-2016 0.1    gjwillems     created
# 08-02-2017 0.2    gjwillems     libbash.sh integration
# 01-03-2017 0.3    gjwillems     new-script detection added
# 02-03-2017 0.4    gjwillems     postgres .sql file-detection added
#            0.5    gjwillems     \<command> option for postgres added
# 28-06-2017 0.6    gjwillems     sqlcli split into Oracle and Postgres scripts
# 15-08-2017 0.7    gjwillems     minor change: check if ORACLE_SID is set 
# 16-08-2017 0.8    gjwillems     sequel call imprpoved: up 2 4 parameters
#                                 can be supplied to a script; 
# 22-08-2017 0.9    gjwillems     rebuild SQL filelist improved
# 28-08-2017 1.0    gjwillems     BUG: global/conf/oracle.conf contains default
#                                 SID => moved to local/conf
# 07-09-2017 1.1    gjwillems     check on oracle binaries & DB availability
# 18-09-2017 1.2    gjwillems     improved check on instance availability
# 27-09-2017 1.3    gjwillems     improved coment section in list
# 02-11-2017 1.4    gjwillems     rep(eat) function added 
# 21-11-2017 1.5    gjwillems     improved liust function: skip dirs & symlinks;
#                                 timing option added: set_timing toggle for
#                                 sql scripts and statements
# 12-07-2017 1.6    gjwillems     timing option improved and bug fixed
# 13-03-2018 1.7.1  gjwillems     @ prefix implies running a script 
# 26-06-2018 1.8.1  gjwillems     TWO_TASK aware so sqls works on EBS Appservers 
#                                 as well
# 29-08-2018 1.9.1  gjwillems     usage function added
# 04-04-2019 1.10.1 gjwillems     non-shell invocation added
#
# ------------------------------------------------------------------------------
# Minor version # added for small improvements and bug fixes
# 14-12-2017 1.6.1 gjwillems     columns function improved to set width
#
# ==============================================================================
# set -xv
SC_REV="1.10.1"
SC_REV_DATE="Thu Apr  4 10:56:54 CEST 2019"

mod=$(basename ${0})
copyright="(c) Copyright 2017-2019 provincie Gelderland I&A | RAS | DBB"
dynamic_settings=/tmp/.settings.sh
internalflg=0
runflg=0
force=0
argc=${#}
_self_=$(which ${mod})
# rlwrap support met de alias brmoctls (libbrmo.sh)
# rlwrap="rlwrap -D 1 -i -H $HOME/bin/.${mod}_history"
quiet=0 # i.e. verbose = true
dprompt="${mod}"
date_prompt=0
sqlsh=1
oracle_not_available=0
timing=

# internal function aliasses
function sp { sequelplus "${@}"; }

# this script is sourced, so re-source the libs...
source ${GLOBAL_LIB}/libbash.sh
source ${GLOBAL_LIB}/liboracle.sh
getp ${GLOBAL_CNF}/system.dat

# ==============================================================================
# usage function
# ------------------------------------------------------------------------------
function usage {
   item="${1}"
   sqlf="${GLOBAL_SQL}/${item}.sql"
   if [ -z ${item} ]; then
      printf "\n   %s\n" "$(version)"
      cat << EOU
   usage: use 'sqls' to start an interactive shell, use 'command' to see built 
          in commands, use 'list' to see availeble scripts or use Oracle SQL 
          commands for DCL DML and DDL.
   
   ${copyright}

EOU
   else
      if [ -f ${sqlf} ]; then
         less ${sqlf}
      else
         printf "No information found for ${item}\n" 
      fi
   fi
}

# ==============================================================================
# Version function
# ------------------------------------------------------------------------------
function version {
   mode=""
   [[ ${sqlsh} -eq 1 ]] && mode=" Shell Mode"
   printf "%s%s Version %s build %s\n" "${mod}" "${mode}" "${SC_REV}" \
                                       "${SC_REV_DATE}"
}

# ==============================================================================
# basic initialisation of script instance: validate script command completion
# lists etc.
# ------------------------------------------------------------------------------
function _init_ {
   local _self_=${FUNCNAME[0]}

   [[ -z ${SQLPATH} ]] && return 0

   printf "# ----------------------------------------------------------------\n" 
   printf "# %s\n" "$(version)"
   printf "# \n"
   printf "# File: %s\n" "${ccl_file}"
   printf "# \n"
   printf "# generated by %s @ %s\n" ${mod} "$(date)"
   printf "# ----------------------------------------------------------------\n" 

   for path in $(printf "%s\n" $(printf "%s\n" ${SQLPATH}|sed 's/:/ /g' ))
   do
      for file in $(ls -1 ${path} | fgrep '.sql' | sort)
      do
         # skip the symlinks
         if [ ! -h ${file} ]; then
            # basenamefile => extension skipped
            bnfile=$(echo ${file} | sed 's/\.sql//g')
            arguments=$(grep ^"-- ::" ${path}/${bnfile}.sql | sed 's/-- ::/::/g')
            printf "${bnfile} ${arguments}\n"
         fi
      done
   done
   return 0
}

# ==============================================================================
# set a specific oracle SID or Postgres DB
# ------------------------------------------------------------------------------
function setdb {
   local _self_=${FUNCNAME[0]}
   DB=${1}

   [[ ${DB_VENDOR} == "oracle" ]] && sid ${DB} && return 0

   return 1
}

# ==============================================================================
# geeft een overzicht van de commandoset / functies in sqlcli
# ------------------------------------------------------------------------------
function command {
   local _self_=${FUNCNAME[0]}
   (
      if [[ -s $(which ${mod}) ]]; then
         printf "\n${mod} ${rev} commando set:\n\n"
         cat $(which $mod) | grep "^function" | cut -d ' ' -f 2| sort
         echo
      else
         printf "$mod: kan ${mod} niet openen in huidige locatie\n"
      fi
   )
   (
      catch_if_debug "interne functie voor het tonen van alle lokale functies"
   )
   return 0
}

function void () {
   return
}

# ==============================================================================
# add timing info to SQL statements and script execution
# ------------------------------------------------------------------------------
function set_timing () {
   [[ ! -z ${timing} ]] && timing= && echo timing is off && return
   [[ -z ${timing} ]] && timing=time && echo timing is on && return
}

# ==============================================================================
# show all sql scripts that are available
# create a dynamic list based on screen size i.e. 1, 2 or 3 column output
# ------------------------------------------------------------------------------
function list () {
   local _self_=${FUNCNAME[0]}
   # set -xv
   columns
   [[ ${columns} -gt 210 ]] && export columns=207 && stty columns ${columns}

   # determine number of columns to print
   if [ ${columns} -eq 207 ]; then
      cols=3
   elif [ ${columns} -le 130 ]; then
      cols=1
   else
      cols=2
   fi

   ((x=columns/cols))
   ((x=x-23))
   ((x=x))   

   printf "\n\033[1m\033[34mAvailable ${DB_VENDOR} sql commands are:\033[0m\n"
   ((hrr=columns-0))
   hr ${hrr} 1
   
   c=0
   cat ${ccl_file} | grep -v ^# | sort| while read line
   do
      ary=(${line})
      prc=${ary[0]}
      ary=(${ary[@]/${ary[0]}})
      [[ ${c} -eq ${cols} ]] && c=0 && printf "|\n"
      printf "| %20.20s " "${prc}"; $(echo eval printf "%-$x.${x}s" \"${ary[*]}\")
      ((c+=1))
   done
   printf "|\n"
   hr ${hrr} 0 \|
   printf "\n| Notes: argument = mandatory, [argment] = optional, "
   printf "(l) = like-oparator in use"
   [[ ${DB_VENDOR} == "postgres" ]] && printf \
      "; PostgreSQL commands: \\\\\<command>"
   printf "\n"
   hr ${hrr} 1
   printf "\n\n"
   return 0
}
# ==============================================================================
# check if the instance is available 
# ------------------------------------------------------------------------------
function db_up {
   sidsup | grep -qw ${ORACLE_SID} 
   local rv=$? 
   
   [[ ${rv} -eq 1 ]] \
   && printf "\033[31mOracle instance ${ORACLE_SID} is not available\033[0m\n" \
   && oracle_not_available=1 && return 1
   printf "\033[32mOracle instance ${ORACLE_SID} is available\033[0m\n"
   oracle_not_available=0
   return 0 
}

# ==============================================================================
# simple messaging function
# ------------------------------------------------------------------------------
function out {
   pmsg="${1}"
   [[ ${quiet} -eq 0 ]] && printf "%s\n" "${pmsg}" && return
}

# ==============================================================================
# enable prompt with timing info
# ------------------------------------------------------------------------------
function set_ps {
   # zet timer prompt
   dprompt='${DATUM}-${mod}'
   date_prompt=1
}

# ==============================================================================
# signal handlers
# ------------------------------------------------------------------------------
function sigquit {
   echo exit
   exit 0
}

function sigbreak {
   break
   return 0
}

function q {
   echo quit
   exit 0
}

# ==============================================================================
# get number of terminal columns
# ------------------------------------------------------------------------------
function columns {
   local _self_=${FUNCNAME[0]}
   [[ ! -z ${1} ]] && stty columns ${1} && echo columns set to ${1} && return 0

   export columns=$(stty -a | grep columns | cut -d ';' -f 3| awk '{ printf "%s",$2 }')
   printf "got columns [${columns}]\n"
   return 0
}

# ==============================================================================
# zet (eigenlijk alleen zinvol in de shell modus) het bericht type
# ------------------------------------------------------------------------------
function set_type {
   mt=${1}
   printf "export DB_VENDOR=$(lower "${mt}")\n" > ${dynamic_settings}
   # printf "export DB_VENDOR=$(echo -n ${mt} | tr '[A-Z]' '[a-z]')\n" > ${dynamic_settings}
   printf "DB vendor set to [${mt}]\n"
   return ${?}
}

# ==============================================================================
# rep(eat) function to execute a sqlscript multiple times
# arg1 script
# arg2 number of cycles, default 5
# arg3 seconds to wait , default 5 
# ------------------------------------------------------------------------------
function rep {
   local rscript=${1}
   local cycles=${2:-5}
   local seconds=${3:-5}

   for i in $(seq 1 ${cycles})
   do
      trap 'sigbreak' INT
      [[ ${CLS} -eq 1 ]] && clear
      sequelplus @${rscript}
      printf "iteration ${i} of ${cycles}, waiting ${seconds}s."
      sleep ${seconds}
      printf "\n"
   done
   return 0
}

# ==============================================================================
# Oracle SQL*Plus 
# ------------------------------------------------------------------------------
function sequelplus {
   tobeexecuted=(${@}) 
   local _self_=${FUNCNAME[0]}

   [[ ${oracle_not_available} -eq 1 ]] \
   && printf "Oracle instance [${ORACLE_SID}] is not available!\n" \
   && return 1
   [[ ! -x ${ORACLE_HOME}/bin/sqlplus ]] \
   && printf "Oracle binaries not available, or invalid path: [$ORACLE_HOME]\n" \
   && return 1
  
   if [ ${tobeexecuted[0]:0:1} == "@" ]; then
      script=${tobeexecuted[0]}
      par1=${tobeexecuted[1]}
      par2=${tobeexecuted[2]}
      par3=${tobeexecuted[3]}
      par4=${tobeexecuted[4]}
   fi

   (
      tracemsg="call to ${_self_}: arguments: ${tobeexecuted[@]}"
      catch_if_debug "${tracemsg}"
      catch_if_debug "EXEC: ${tobeexecuted[@]} P1[${par1}] P2[${par2}]\
 P3[${par3}] P4[${par4}]"
      return 1
   )

   if [ ${tobeexecuted[0]:0:1} == "@" ]; then
      if [ -z ${TWO_TASK} ]; then
         sqlplus -s /nolog << EOS
         connect / as sysdba
         set colsep ${COLSEP:-' '}
         ${SETTINGS} 
         ${script} ${par1:-%} ${par2:-%} ${par3:-%} ${par4:-%} 
EOS
      else
         sqlplus -s /nolog << EOS
         connect system/${DWP} 
         set colsep ${COLSEP:-' '}
         ${SETTINGS} 
         ${script} ${par1:-%} ${par2:-%} ${par3:-%} ${par4:-%} 
EOS
      fi
   else
      if [ -z ${TWO_TASK} ]; then
         sqlplus -s /nolog << EOS
         connect / as sysdba
         set colsep ${COLSEP:-' '}
         ${SETTINGS} 
         ${tobeexecuted[@]}
EOS
      else
         sqlplus -s /nolog << EOS
         connect system/${DWP} 
         set colsep ${COLSEP:-' '}
         ${SETTINGS} 
         ${tobeexecuted[@]}
EOS
      fi
   fi

return 0
}

# ==============================================================================
# SQL Shell SUB 
# ------------------------------------------------------------------------------
function _shell_settings_() {
   local _self_=${FUNCNAME[0]}
   
   [[ -z ${DB_VENDOR} ]] && printf "DB Vendor not set, defaults to: " \
                         && export DB_VENDOR=${dfltype} \
                         && echo ${DB_VENDOR}
   [[ ${date_prompt} -eq 1 ]] && DATUM=$(date +"%Y-%m-%d_%H:%M:%S")

   case ${DB_VENDOR} 
   in
        oracle) # try 2 use ORACLE_SID
                eval "prompt=\"${dprompt}@\"\"${ORACLE_SID}> \"" ;;
      postgres) # try 2 use PGINSTANCE
                eval "prompt=\"${dprompt}@\"\"${PGINSTANCE}> \"" ;;
   esac
}


# ==============================================================================
# rebuild the ccl file for list command
# ------------------------------------------------------------------------------
function build_list () {
   local _self_=${FUNCNAME[0]}
   local _quiet_=${1:-0}

   cp ${ccl_file} ${ccl_file}.$$
   _init_ > ${ccl_file}
   
   diff -q -I '# generated by' ${ccl_file} ${ccl_file}.$$ 1>/dev/null
   rv=${?}
   [[ ${rv} -eq 0 ]] && rm -f ${ccl_file}.$$

   [[ ${_quiet_} -eq 1 ]] && [[ ${rv} -ne 0 ]] && \
   out "${_self_} - Command completion file (re)build, backup in [${ccl_file}.$$]"

   return 0
}

# ==============================================================================
# SQL Shell invocation 
# ------------------------------------------------------------------------------
function sequelshell {
   local _self_=${FUNCNAME[0]}

   argc=${#@}

   # set e.g. a default Oracle SID
   [[ -s ${GLOBAL_CNF}/oracle.conf ]] && source ${GLOBAL_CNF}/oracle.conf
   [[ -s ${LOCAL_CNF}/oracle.conf ]] && source ${LOCAL_CNF}/oracle.conf
   [[ -z ${ORACLE_SID} ]] && out "Attention: \$ORACLE_SID is not set!"
   [[ -z ${TWO_TASK} ]] && [[ ! -z ${ORACLE_SID} ]] && db_up
   [[ ! -z ${TWO_TASK} ]] && ORACLE_SID=${TWO_TASK}

   set -f

   [[ ! -z ${DB_VENDOR} ]] && \
   [[ ${argc} -eq 0 ]] && printf "${DB_VENDOR} database detected, use list to see the available command set\n"

   local sqlcmd=0

   build_list 1

   while [ 1 ]
   do
      trap 'sigquit' HUP
      # trap 'sigquit' INT
         _shell_settings_ 
         printf "${prompt}"
         if [ ${argc} -eq 0 ]; then
            read -a command 
            rv=${?}
         elif [ ${argc} -eq 1 ]; then
             command="${1}"
         fi
         [[ ${command} == "quit" ]] && exit 0
         # EOT/EOF found
         [[ ${rv} -eq 1 ]] && exit 0
   
         (
            catch_if_debug "${_self_}() is sqlsh intenal command: [${rv}]"
            catch_if_debug "${_self_}() command => [${command}]"
         )

         # Check quietly if the specified command is in the command completion
         # list for the current selected database vendor
         grep -wqi "^${command[0]:-void}" ${ccl_file}
         if [[ $? -eq 1 ]]; then
            set -f
            cmd=$(upper ${command[0]})
            case ${cmd} 
            in
               TRUNCATE|\
               REVOKE|\
               DROP|\
               SHOW|\
               DESC|\
               SELECT|\
               UPDATE|\
               DELETE|\
               INSERT|\
               CREATE|\
               GRANT|\
               ALTER) sqlcmd=1
                      [[ -z ${timing} ]] && sequelplus ${command[@]}
                      [[ ! -z ${timing} ]] && time sequelplus ${command[@]}
                      ;;
            esac
            [[ -s ${command[0]} ]] && sqlcmd=1 \
                                   && eval ${timing} sequelplus @${command[@]}
            
            [[ ${sqlcmd} -eq 0 ]] && set +f && eval ${command[@]:-"void"} 
   
         elif [[ ${DB_VENDOR} == "oracle" ]]; then
            eval ${timing} sequelplus @${command[@]}
         fi
         sqlcmd=0
       
         (
            tracemsg="${_self_}()->EXEC ${command[@]}"
            catch_if_debug "${tracemsg}"
            catch_if_debug "argc=[${argc}]"
         )

         [[ -s ${dynamic_settings} ]] && source ${dynamic_settings} && rm -f ${dynamic_settings}
         [[ ${argc} -gt 0 ]] && return
   done
}

# ====== main scope ============================================================
while getopts "fIst:Vh" argv
do
   (
      catch_if_debug "parser::while loop => argc:[${argc}] argv:[${*}]"
   )
   case ${argv}
   in
      # ========================================================================
      # Generic: specified command is in the last argument in call to $0
      # thus always positional! therefore we MUST substract 1 from argc
      # to prevent the specified command dropping from the list
      # ========================================================================
      V) version && exit 0 ;;
      h) usage ;;
      I) # Internal command / command parameter
         parameter=${OPTARG}
         ((argc-=1))
         shift ${argc}
         internalflg=1 ;;
      f) # Forcae flag: bijvoorbeeld om geforceeerd een run te starten
         # zonder dat er gecontroleerd wordt of er nieuwe berichten zijn
         ((argc-=1))
         shift ${argc}
         force=1 ;;
      s) # interactieve shell
         sequelsh=1 ;;
      t) # DB Vensdot type: oracle, postgres etc.
         ((argc-=1))
         shift ${argc}
         export DB_VENDOR=$(lower "${OPTARG}")
         export UDB_VENDOR=$(upper ${DB_VENDOR}) ;;
   esac
done

# ====== main scope ============================================================

[[ ${#@} -eq 0 ]] && version
[[ ${#@} -eq 1 ]] && export SILENT=1
# echo config_file=[${config_file}]
# echo cc_file=[${cc_file}]
sequelshell "${@}"

# [[ ${#@} -gt 0 ]] && sequelplus "${@}"

# ====== end of sqlcli =========================================================

